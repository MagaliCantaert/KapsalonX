@{
    ViewData["Title"] = "About";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>




<form>
    <div class="form-group">
        <label for="formName">Full Name:</label>
        <input type="text" name="name" class="form-control" id="formName"
               v-model="model.name" v-validate="'required'">
        <span v-show="errors.has('name')" class="text-danger">
            {{errors.first('name')}}
        </span>
    </div>
    <div class="form-group">
        <label for="formBio">Bio:</label>
        <textarea name="bio" id="formBio" class="form-control" rows="3" v-model="model.bio"></textarea>
    </div>
    <div class="form-group">
        <label for="formGender">Gender:</label>
        <select v-model="model.gender" class="form-control">
            <option>Female</option>
            <option>Male</option>
        </select>
    </div>
    <div class="form-group">
        <label for="formGender">Frameworks:</label>
        <select v-model="model.frameworks" class="form-control" multiple>
            <option>Vue</option>
            <option>Aurelia</option>
            <option>Preact</option>
            <option>Inferno</option>
        </select>
    </div>
    <div class="form-group">
        <label>
            <input type="checkbox" v-model="model.subscribe"> Subscribe me, please!
            {{model.subscribe}}
        </label>
    </div>
</form>

@section scripts{

    <script>
        import Vue from 'vue';
        import VeeValidate from 'vee-validate';
        Vue.use(VeeValidate);

        var app = new Vue({
            el: '#app',
            data: {
                Title: 'Vue Vee Validation',
                Model:
                {
                    name: '',
                    bio: '',
                    gender: '',
                    frameworks: [],
                    subscribe: false
                }
            }
        }
            });

    </script>
}




@*<div id="signup-form">
            <form>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="text" v-model="email" />
                    <span v-if="email.length > 1">{{ email_msg }}</span>
                </div>
                <div class="form-group">
                    <label for="psw1">Password <span id="characters">(6 or more characters required)</span></label>
                    <input type="password" v-model="password1" />
                    <span v-show="msg1">{{ pwd1_msg }}</span>
                </div>
                <div class="form-group">
                    <label for="psw2">Repeat Password</label>
                    <input type="password" v-model="password2" />
                    <span v-show="msg2">{{ pwd2_msg }}</span>
                </div>
                <div class="form-group">
                    <button :class="{active: disable_btn}" :disabled="disable_btn" onclick="on_signup()">Sign Up</button>
                    <a href="#0" onclick="show_terms()">terms & conditions</a>
                </div>
            </form>
        </div>

        <div id="results">
            <div class="results">
                <h4>FORM SUBMIT SUCCESSFUL</h4>
                <p>Form data gets saved and/or sent to server. There could also be a confirmation sent to email address</p>
                <p>Button would take you to some sort of after signup page.<br>In this case it just shows the form again</p>
                <button onclick="back_to_signup()">Continue</button>
            </div>
        </div>

        <div id="terms">
            <div class="terms">
                <h4>TERMS & CONDITIONS</h4>
                <p>A list of terms, conditions, and policies.</p>
                <button onclick="back_to_signup()">Back</button>
            </div>
        </div>

    @section scripts{
        <script>
            var signup-form = new Vue({
      el: '#signup-form',

      // DATA
      data: {
        return {
          email: '',
          email_msg: '',
          password1: '',
          pwd1_msg: '',
          password2: '',
          pwd2_msg: '',
          disable_btn: true,
          msg1: true,
          msg2: true
        }
      },

      // WATCH
      watch: {
        email: function(value) {
          this.valid_email(value, 'email_msg');
        },
        password1: function(value) {
          if(this.check_password_length(value, 'pwd1_msg', 6)) {
            this.check_passwords_match();
          }
        },
        password2: function(value) {
          if(this.check_password_length(value, 'pwd2_msg', 6)) {
            this.check_passwords_match();
          }
        }
      },

      // METHODS
      methods: {

        valid_email(email, msg) {
          if (/^\w+([\.-]?\w+)*\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)) {
            this[msg] = '';
            return true;
          } else {
            this[msg] = 'Keep typing...waiting for a valid email';
            return false;
          }
        },

        check_password_length(value, msg, total) {
          var length = value.length;
          var sum = 0;
          var display;

          sum = (total - length);

          switch(sum) {
            case 0:
              display = '';
              break;
            case 1:
              display = 'Keep going - just need '+ sum + ' more character.';
              break;
            default:
              display = 'Keep going - just need '+ sum + ' more characters';
          }

          if(length >= total) {
            this[msg] = '';
            return true;
          } else {
            this[msg] = display;
            return false;
          }

        },

        check_passwords_match() {
          if(this.password1.length > 5 && this.password2.length > 5) {
              if(this.password2 != this.password1) {
                this.pwd2_msg = 'Passwords do not match';
                this.disable_btn = true;
                return true;
              } else {
                this.pwd2_msg = '';
                this.disable_btn = false;
                return false;
              }
            }
        },

        on_signup() {
          this.email = '';
          this.password1 = '';
          this.password2 = '';
          this.email_msg = '';
          this.pwd1_msg = '';
          this.pwd2_msg = '';
          this.msg1 = false;
          this.msg2 = false;
          this.disable_btn = true;
          this.$emit('change_comp', 'results');
        },

        show_terms() {
          this.$emit('change_comp', 'terms');
        }
      }

    });

    var Results = Vue.component('results', {

      // TEMPLATE
      template: '#results',

      // METHODS
      methods: {
        back_to_signup() {
          this.$emit('change_comp', 'signup-form');
        }
      }

    });

    var Terms = Vue.component('terms', {

      // TEMPLATE
      template: '#terms',

      // METHODS
      methods: {
        back_to_signup() {
          this.$emit('change_comp', 'signup-form');
        }
      }

    });


    new Vue({

      // ELEMENT
      el: '#app',

      // DATA
      data: {
        compname: 'signup-form'
      },

      // COMPONENTS
      components: {
        'signup-form': SignupForm,
        'results': Results,
        'terms': Terms
      },

      methods: {
        swapcomp: function(comp) {
          this.compname = comp;
        }
      }

    });
        </script>
    }*@